---
title: "Analysis 2"
author: "Andrew Yule"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

Load required libraries

```{r}
#library(MASS)
library(olsrr)
library(tidyverse)
library(terra)

library(broom)
library(caret)
```

Read training and test data, then drop any columns containing missing values

```{r}
housesTrain = read_csv("train.csv")
housesTest = read_csv("test.csv")

# Remove ID column only from the training set
housesTrain = dplyr::select(housesTrain, -Id)

# Find which columns have missing values between the training and test data sets
colsToDrop = housesTrain |>
  select_if(function(x) any(is.na(x))) |>
  colnames()
colsToDrop2 = housesTest |>
  select_if(function(x) any(is.na(x))) |>
  colnames()

# Remove any of the columns that had missing values
housesTrain =  housesTrain |>
  dplyr::select(-starts_with(c(colsToDrop, colsToDrop2)))
housesTest =  housesTest |>
  dplyr::select(-starts_with(c(colsToDrop, colsToDrop2)))
```

```{r}
# Screen for numerical variables that should be log-transformed
housesTrain |> 
  dplyr::select(where(is.numeric)) |>
  gather() |>
  ggplot(aes(x = value)) + 
    facet_wrap(~key, scales = "free") + 
    geom_histogram()
```

The following variables should be log transformed:
- LotArea
- FirstFlrSF
- SecondFlrSF
- GrLivArea
- WoodDeckSF
- OpenPorchSF
- EnclosedPorch
- ThirdSsnPorch
- ScreenPorch
- PoolArea
- MiscVal
- SalePrice

```{r}

# MoSold should be a factor instead of integer
housesTrain$MoSold = factor(housesTrain$MoSold, levels = seq(1, 12))
housesTest$MoSold = factor(housesTest$MoSold, levels = seq(1, 12))

# First ensure that any variables that need log transformations are set to a minimum value of 1 instead of 0. Then, take the log of the values.
housesTrain = housesTrain |>
  mutate(
    LotArea = log(clamp(LotArea, lower = 1)),
    FirstFlrSF = log(clamp(`1stFlrSF`, lower = 1)),
    SecondFlrSF = log(clamp(`2ndFlrSF`, lower = 1)),
    GrLivArea = log(clamp(GrLivArea, lower = 1)),
    WoodDeckSF = log(clamp(WoodDeckSF, lower = 1)),
    OpenPorchSF = log(clamp(OpenPorchSF, lower = 1)),
    EnclosedPorch = log(clamp(EnclosedPorch, lower = 1)),
    ThirdSsnPorch = log(clamp(`3SsnPorch`, lower = 1)),
    ScreenPorch = log(clamp(ScreenPorch, lower = 1)),
    PoolArea = log(clamp(PoolArea, lower = 1)),
    MiscVal = log(clamp(MiscVal, lower = 1)),
    SalePrice = log(clamp(SalePrice, lower = 1)),
  )

housesTest = housesTest |>
  mutate(
    LotArea = log(clamp(LotArea, lower = 1)),
    FirstFlrSF = log(clamp(`1stFlrSF`, lower = 1)),
    SecondFlrSF = log(clamp(`2ndFlrSF`, lower = 1)),
    GrLivArea = log(clamp(GrLivArea, lower = 1)),
    WoodDeckSF = log(clamp(WoodDeckSF, lower = 1)),
    OpenPorchSF = log(clamp(OpenPorchSF, lower = 1)),
    EnclosedPorch = log(clamp(EnclosedPorch, lower = 1)),
    ThirdSsnPorch = log(clamp(`3SsnPorch`, lower = 1)),
    ScreenPorch = log(clamp(ScreenPorch, lower = 1)),
    PoolArea = log(clamp(PoolArea, lower = 1)),
    MiscVal = log(clamp(MiscVal, lower = 1))
  )
```

Forward step regression
```{r}
forwardResults = ols_step_forward_aic(lm(SalePrice ~ ., data = housesTrain))
forwardModel = forwardResults$model

plot(forwardResults)

summary(forwardModel)

results = housesTest
results$SalePrice = exp(predict.lm(forwardModel, newdata = housesTest))
results = results |>
  dplyr::select(Id, SalePrice)

# Export
write_csv(results, "Submissions/Forward_Model.csv")

```

Backward step regression
```{r}
backwardResults = ols_step_backward_aic(lm(SalePrice ~ ., data = housesTrain))
backwardModel = backwardResults$model

plot(backwardResults)

summary(backwardModel)

results = housesTest
results$SalePrice = exp(predict.lm(backwardModel, newdata = housesTest))
results = results |>
  dplyr::select(Id, SalePrice)

# Export
write_csv(results, "Submissions/Backward_Model.csv")

```

Stepwise regression
```{r}
stepResults = ols_step_both_aic(lm(SalePrice ~ ., data = housesTrain), details = TRUE)
stepModel = lm(SalePrice ~ OverallQual + GrLivArea + Neighborhood + OverallCond + YearBuilt + LotArea + RoofMatl + KitchenAbvGr + SaleCondition + Condition2 + Foundation + Fireplaces + Heating + ExterQual + Condition1 + PoolArea + ScreenPorch + WoodDeckSF + HeatingQC + CentralAir + BedroomAbvGr + FirstFlrSF + `2ndFlrSF` + Street + LandSlope + HalfBath + EnclosedPorch + SecondFlrSF + MiscVal + PavedDrive + BldgType + `1stFlrSF` + ExterCond + LotConfig + YearRemodAdd, data = housesTrain)

plot(stepResults)

summary(stepModel)

results = housesTest
results$SalePrice = exp(predict.lm(stepModel, newdata = housesTest))
results = results |>
  select(Id, SalePrice)

# Export
write_csv(results, "Submissions/Both_Model.csv")

```

Best custom model using caret
```{r}
customModel = lm(SalePrice ~ I(MSSubClass^2) + log(LotArea) + Street + LotShape + LandContour + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + BldgType + HouseStyle + OverallQual + OverallCond + YearBuilt + YearRemodAdd + RoofStyle + RoofMatl + ExterQual + ExterCond + Foundation + Heating + HeatingQC + CentralAir + `1stFlrSF` + `2ndFlrSF` + LowQualFinSF + GrLivArea + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd + Fireplaces + PavedDrive + WoodDeckSF + OpenPorchSF + EnclosedPorch + `3SsnPorch` + ScreenPorch + PoolArea + log(MiscVal) + MoSold + YrSold + SaleCondition, data = housesTrain)
summary(fit)

#control = trainControl(method = "LOOCV", number = 10)
control = trainControl(method = "cv")
customModel = train(SalePrice ~ ., data = housesTrain, method = "lm", trControl = control)
summary(customModel)

results = housesTest
results$SalePrice = exp(predict(customModel, newdata = housesTest))
results = results |>
  select(Id, SalePrice)

# Export
write_csv(results, "Submissions/Custom_Model.csv")

```

Best custom model using external cross validation
```{r}
customModel = lm(SalePrice ~ I(MSSubClass^2) + log(LotArea) + Street + LotShape + LandContour + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + BldgType + HouseStyle + OverallQual + OverallCond + YearBuilt + YearRemodAdd + RoofStyle + RoofMatl + ExterQual + ExterCond + Foundation + Heating + HeatingQC + CentralAir + `1stFlrSF` + `2ndFlrSF` + LowQualFinSF + GrLivArea + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd + Fireplaces + PavedDrive + WoodDeckSF + OpenPorchSF + EnclosedPorch + `3SsnPorch` + ScreenPorch + PoolArea + log(MiscVal) + MoSold + YrSold + SaleCondition, data = housesTrain)
summary(fit)

#control = trainControl(method = "LOOCV", number = 10)
control = trainControl(method = "cv")
customModel = train(SalePrice ~ ., data = housesTrain, method = "lm", trControl = control)
summary(customModel)

results = housesTest
results$SalePrice = exp(predict(customModel, newdata = housesTest))
results = results |>
  select(Id, SalePrice)

# Export
write_csv(results, "Submissions/Custom_Model.csv")

```
